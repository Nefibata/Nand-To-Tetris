// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
	Mux(a=true,b=instruction[5],sel=instruction[15],out=i5);
    Mux16(a=instruction[0..15],b=ALUout,sel=instruction[15],out=Mux1);
	ARegister(in=Mux1,load=i5,out=Aout,out[0..14]=addressM);
	
	Mux(a=true,b=instruction[12],sel=instruction[15],out=i12);
	Mux16(a=Aout,b=inM,sel=i12,out=Mux2);
	
	Mux(a=false,b=instruction[4],sel=instruction[15],out=i4);
	DRegister(in=ALUout,load=i4,out=Dout);
	
	
	ALU(x=Dout,y=Mux2,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=ALUout,out=outM,zr=Azr,ng=Ang);
	Mux(a=false,b=true,sel=instruction[3],out=writeM1);
	And(a=instruction[15],b=writeM1,out=writeM);
	
	
	
	
	
	
	
	And(a=instruction[1],b=Azr,out=out1);
	Not(in=Ang,out=nng);
	Not(in=Azr,out=nazr);
	And(a=nazr,b=nng,out=nng1);
	And(a=instruction[0],b=nng1,out=out2);
	And(a=instruction[2],b=Ang,out=out3);
	Or(a=out1,b=out2,out=out4);
	Or(a=out3,b=out4,out=load1);
	Mux(a=false,b=load1,sel=instruction[15],out=load2);
	PC(in=Aout,inc=true,load=load2,reset=reset,out[0..14]=pc);
	
	
	
}
