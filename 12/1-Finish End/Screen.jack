// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array powersOfTwo;
    static boolen m;

    /** Initializes the Screen. */
    function void init() {
        let powersOfTwo =Array.new(16);
        let powersOfTwo[0]=1;
        let powersOfTwo[1]=2;
        let powersOfTwo[2]=4;
        let powersOfTwo[3]=8;
        let powersOfTwo[4]=16;
        let powersOfTwo[5]=32;
        let powersOfTwo[6]=64;
        let powersOfTwo[7]=128;
        let powersOfTwo[8]=256;
        let powersOfTwo[9]=512;
        let powersOfTwo[10]=1024;
        let powersOfTwo[11]=2048;
        let powersOfTwo[12]=4096;
        let powersOfTwo[13]=8192;
        let powersOfTwo[14]=16384;
        let powersOfTwo[15]=powersOfTwo[14]+16384;
        let m=true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int a;
        let a=16384;
        while(a<24576){
            do Memory.poke(a,0);
           let  a=a+1;
        }
        return;

    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let m=b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address,value,temp;
        if (m) {
            let address=(32*y)+(x/16);
            let value=Memory.peek(16384+address);
            let temp=Screen.mod(x,16);
            do Memory.poke(address+16384,value|powersOfTwo[temp]);
            
        }else{
            
            let address=(32*y)+(x/16);
            let value=Memory.peek(16384+address);
            let temp=Screen.mod(x,16);
            do Memory.poke(address+16384,value&(~powersOfTwo[temp]));
        }
        return;
        
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a,b,dx,dy,diff;
        if(y1=y2){
            if(x2>x1){
                while(x1<(x2+1)){
                    do Screen.drawPixel(x1,y1);
                    let x1=x1+1;
                }
                return;

            }else{
                while(x2<(x1+1)){
                    do Screen.drawPixel(x2,y1);
                    let x2=x2+1;

                }
                return;
            }
        }
        if (x1<x2){
            if (y1<y2) {
                let dx=x2-x1;
                let dy=y2-y1;
                let a=0;
                let b=0;
                let diff=0;
                while ((~(a>dx))=(~(b>dy))){
                    do Screen.drawPixel(x1+a,y1+b);
                    if (diff<0){
                        let a=a+1;
                        let diff=diff+dy;
                    }else{
                        let b=b+1;
                        let diff=diff-dx;
                    }
                }
                return;

            }else{

                let dx=x2-x1;
                let dy=y1-y2;
                let a=0;
                let b=0;
                let diff=0;
                while ((~(a>dx))=(~(b>dy))){
                    do Screen.drawPixel(x1+a,y1-b);
                    if(diff<0){
                        let a=a+1;
                        let diff=diff+dy;

                    }else{
                        let b=b+1;
                        let diff=diff-dx;
                    }
                }
                return;
            }
        }else{
            if(y1<y2){
                
                let dx=x1-x2;
                let dy=y2-y1;
                let a=0;
                let b=0;
                let diff=0;
                while ((~(a>dx))=(~(b>dy))){
                    do Screen.drawPixel(x1-a,y1+b);
                    if(diff<0){
                        let a=a+1;
                        let diff=diff+dy;

                    }else{
                        let b=b+1;
                        let diff=diff-dx;
                    }
                }
                return;

            }else{
                
                let dx=x1-x2;
                let dy=y1-y2;
                let a=0;
                let b=0;
                let diff=0;
                while ((~(a>dx))=(~(b>dy))){
                    do Screen.drawPixel(x1-a,y1-b);
                    if(diff<0){
                        let a=a+1;
                        let diff=diff+dy;

                    }else{
                        let b=b+1;
                        let diff=diff-dx;
                    }
                }
                return;
            }
        }

        

        


    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        
            if(y1<y2){
                while (y1<(y2+1)){
                    do Screen.drawLine(x1,y1,x2,y1);
                    let y1=1+y1;
                }
                return;
             
            }else{
                    while (y2<(y1+1)){
                    do Screen.drawLine(x1,y2,x2,y2);
                    let y2=1+y2;
                }
                return;
            }

        


    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        if (r<181) {
        let dy=r;
        while((dy+r)>(-1)){
            do Screen.drawLine(x-Math.sqrt((r*r)-(dy*dy)),y+dy,x+Math.sqrt((r*r)-(dy*dy)),y+dy);
            let dy=dy-1;
        }
        return;
        }
        return;

    }
    function int mod(int x,int y){
        var int m,n;
        let m=x/y;
        let n=x-(m*y);
        return n;
    }

}
