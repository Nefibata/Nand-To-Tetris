// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/** A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        let powersOfTwo =Array.new(16);
        let powersOfTwo[0]=1;
        let powersOfTwo[1]=2;
        let powersOfTwo[2]=4;
        let powersOfTwo[3]=8;
        let powersOfTwo[4]=16;
        let powersOfTwo[5]=32;
        let powersOfTwo[6]=64;
        let powersOfTwo[7]=128;
        let powersOfTwo[8]=256;
        let powersOfTwo[9]=512;
        let powersOfTwo[10]=1024;
        let powersOfTwo[11]=2048;
        let powersOfTwo[12]=4096;
        let powersOfTwo[13]=8192;
        let powersOfTwo[14]=16384;
        let powersOfTwo[15]=powersOfTwo[14]+16384;
        return;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum,shiftedX,j;
        let j=0;
        let sum=0;
        let shiftedX=x;
        while (j<16){
            if(~((y&powersOfTwo[j])=0)){
                let sum=sum+shiftedX;
            }
            let shiftedX=shiftedX+shiftedX;
            let j=j+1;
        }

        return sum;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q,re;
        var boolean s;

        if((x < 0) = (y < 0)){
            let s=true;
        }else{
            let s=false;
        }

        let x=Math.abs(x);
        let y=Math.abs(y);

        if(y>x){
            return 0;
        }
        
        if (y < 16384) {
            let q = Math.divide(x, y + y);
        } else {
            let q = 0;
        }

        if((x-(2*q*y))<y){
            let re=2*q;
            
        }else{
            let re=2*q+1;
           
        }

        if(s){
            return re;

        }else{
            return -re;
        }


    }

    /** Returns the integer part of the square root of x.
    */
    function int sqrt(int x) {
       var int y, j, temp, tempTwo;
        let y = 0;
        let j = 7;

        while (~(j < 0)) {
            let temp = y + powersOfTwo[j];
            let tempTwo = temp * temp;

            if (~(tempTwo > x) & (tempTwo > 0)) {
                let y = temp;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater value.
    */
    function int max(int a, int b) {
        if(a <b){
            return b;
        }else{
            return a;
        }

    }

    /** Returns the smaller value.
    */
    function int min(int a, int b) {
        if(a <b){
            return a;
        }else{
            return b;
        }

    }

    /** Returns the absolute value of x
    */
    function int abs(int x) {
        if(x<0){
            return -x;

        }else{
            return x;
        }

    }
}
