// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array ar;
    field int length;


    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        /** Avoiding the null. */
		if(maxLength = 0){
           let maxLength = 1;   
        }
        let ar=Array.new(maxLength);
        let length=0;
        return this;

    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(ar);
        do Memory.deAlloc(this);
        return;

    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return ar[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let ar[j]=c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let ar[length]=c;
        let length=length+1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length=length-1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i,re;
        var char c;
        if(ar[0]=45){
            let i=i+1;
        }
        while (i<length){
            let c=ar[i];
            
            let re=(c-48)+(re*10);
            let i=i+1;
        }
        if(ar[0]=45){
            return -re;
        }else{
            return re;
        }

      

    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int a,b,i;
        var Array arr;
        let length=0;
        if(val<0){
            let a=String.mod(-val,10);
            if(val=0){
                return;
            }
            let b=(-val-a)/10;
            do setInt(b);
            do appendChar(a+48);
            let arr=Array.new(length+1);
            let arr[0]=45;
            let i=0;
            while(i<length){
                let arr[i+1]=ar[i];
                let i=i+1;
            }
            let ar=arr;
            let length=length+1;
        }else{
            let a=String.mod(val,10);
            if(val=0){
                return;
            }
            let b=(val-a)/10;
            do setInt(b);
            do appendChar(a+48);
        }
        return;


    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
    return 34;
    }
        function int mod(int x,int y){
        var int m,n;
        let m=x/y;
        let n=x-(m*y);
        return n;
    }
}
