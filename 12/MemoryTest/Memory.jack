// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram,freeram;

    /** Initializes the class. */
    function void init() {
        let ram=0;
        let freeram=2048;
        let freeram[0]=0;
        let freeram[1]=14335;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];

    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int a,b;
        let a=0;
        while(freeram[a+1]<(size+2)){
            let a=freeram[a];
        }
        let freeram[a+1]=freeram[a+1]-size-2;
        let freeram[a+freeram[a+1]+3]=size;
        return a+freeram[a+1]+4;
        
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int a,bf;
        let a=freeram[0];
        let o=o-2;
        while(~(a=0)){
            let bf=a;
            let a=freeram[a];
        }
        let freeram[bf]=o;
        let o[0]=0;
        return;
    }    
}
